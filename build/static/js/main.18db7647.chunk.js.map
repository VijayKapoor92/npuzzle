{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","views/GameView/index.js","components/Modal/index.js","components/ModalWinner/index.js","views/IntroView/index.js","utils/constants.js","utils/puzzles.js","utils/index.js","dao/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","value","position","onClick","className","Board","this","squares","winner","fn_click","map","square","index","key","s","i","j","React","Component","Game","onExit","onSaveAndExit","onReset","onClickSquare","steps","game","style","textAlign","marginBottom","fontSize","marginTop","GameView","status","Modal","open","title","children","onClose","ModalWinner","IntroView","onContinue","onStart","PUZZLE_MODE_3X3","Puzzles","Answers","shuffle","t","m","length","n","k","Math","floor","random","l","getPositionZero","Storage","db","localStorage","getItem","response","message","connect","window","createDB","alert","getLastId","get","setItem","Data","push","insert","g","filter","gg","id","update","puzzle","dd","delete","pull","data","JSON","stringify","parse","content","filterById","getId","App","handleStart","setState","handleExit","handleSaveAndExit","handleReset","state","validateColumnAndRow","zero","abs","validateWinner","counter","le","handleClickSquare","openWinner","handleContinue","handleCloseWinner","isWinner","p","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18db7647.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n    const {value, position, onClick} = props;\n    return (\n        <button className=\"square\" onClick={() => onClick(value, position)}>\n            {value !== 0 && value}\n        </button>\n    );\n}\n\nexport default Square;","import React from \"react\";\nimport Square from \"../Square\";\n \nclass Board extends React.Component {\n  render() {\n    const {squares, winner, onClick} = this.props;\n    let fn_click = onClick;\n    if (winner)\n      fn_click = ()=>false;\n\n    return (\n      <div>\n        {squares.map((square, index) => (\n          <div key={index} className=\"board-row\">\n            {square.map((s, i) => (\n              <Square\n                key={i}\n                value={squares[index][i]}\n                position={{i: index, j: i}}\n                onClick={fn_click}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React, { Fragment } from \"react\";\nimport \"../../index.css\";\n\nimport Board from \"../Board\";\n\nclass Game extends React.Component {\n  render() {\n    const {onExit, winner, onSaveAndExit, onReset, onClickSquare, squares, steps, game} = this.props;\n\n    return (\n      <Fragment>\n        <div className=\"game-window\">\n          <div style={{textAlign: \"center\", marginBottom: 10, fontSize: 18}}>\n            <div style={{marginBottom: 5}}>Passos</div>\n            <div>{steps}</div>\n          </div>\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <Board\n                winner={winner}\n                squares={squares}\n                onClick={onClickSquare}\n              />\n            </div>\n          </div>\n          <div style={{marginTop: 10}}>\n            {!winner && (\n              <button onClick={() => onReset()}>Reiniciar</button>\n            )}\n            <button onClick={() => onSaveAndExit(game)}>Salvar e Sair</button>\n            <button onClick={() => onExit()}>Sair</button>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from \"../../components/Game\";\n\nconst GameView = ({status, winner, game, squares, steps, onExit, onSaveAndExit, onReset, onClickSquare}) =>\n  status === \"start\" && (\n    <Game\n      game={game}\n      winner={winner}\n      squares={squares}\n      steps={steps}\n      onExit={onExit}\n      onSaveAndExit={onSaveAndExit}\n      onReset={onReset}\n      onClickSquare={onClickSquare}\n    />\n  );\n\nexport default GameView;","import React from \"react\";\nimport CloseIcon from \"react-icons/lib/fa/close\";\nimport TrophyIcon from \"react-icons/lib/fa/trophy\";\nimport \"./index.css\";\n\nconst Modal = ({open, title, children, winner, onClose}) => {\n  return (\n    <div className={`modal ${open ? \"show\" : \"\"}`}>\n      <div className={`modal-content ${!winner ? \"modal-config\" : \"\"}`}>\n        <div className=\"modal-dismiss\" onClick={() => onClose()}>\n          <CloseIcon/>\n        </div>\n        <div className=\"modal-title\">{title}</div>\n        {winner && (\n          <div>\n            <TrophyIcon style={{fontSize: 64}}/>\n          </div>\n        )}\n        <div className=\"modal-body\">\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default Modal;","import React from \"react\";\nimport Modal from \"../Modal\";\n\nconst ModalWinner = ({open, steps, winner, onClose}) =>\n  <Modal\n    open={open}\n    winner={winner}\n    title=\"Parabéns!\"\n    onClose={onClose}\n  >\n    <div style={{fontSize: 24, textAlign: \"center\", marginTop: 20}}>{steps}</div>\n  </Modal>;\n\nexport default ModalWinner;","import React, { Fragment } from \"react\";\n\nconst IntroView = ({squares, status, onContinue, onStart}) =>\n  status !== \"start\" && (\n    <div className=\"first-page\">\n      <div className=\"first-page__title\">N-PUZZLE</div>\n      <div className=\"first-page__subtitle\">Venha se divertir</div>\n      <div className=\"first-page__action-container\">\n        {status === \"saved\" ? (\n          <Fragment>\n            <button className=\"btn-start\" onClick={() => onContinue(squares)}>Continuar jogo salvo</button>\n            <button className=\"btn-start\" onClick={() => onStart(squares)}>Novo jogo</button>\n          </Fragment>\n        ) : (\n          <button className=\"btn-start\" onClick={() => onStart(squares)}>Novo jogo</button>\n        )}\n      </div>\n    </div>\n  );\n\nexport default IntroView;","export const\n  PUZZLE_MODE_3X3 = \"3x3\",\n  PUZZLE_MODE_4X4 = \"4x4\",\n  PUZZLE_MODE_5X5 = \"5x5\",\n\n  STORAGE_DATABASE = \"game\",\n  STORAGE_CONFIG_DATABASE = \"config\"\n;","import {\n  PUZZLE_MODE_3X3,\n  PUZZLE_MODE_4X4,\n  PUZZLE_MODE_5X5\n} from \"../utils/constants\";\n\nexport const\n  Puzzles = {\n    [PUZZLE_MODE_3X3]: [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 0]\n    ],\n    [PUZZLE_MODE_4X4]: [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 0]\n    ],\n    [PUZZLE_MODE_5X5]: []\n  },\n  Answers = {\n    [PUZZLE_MODE_3X3]: [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 0]\n    ],\n    [PUZZLE_MODE_4X4]: [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 0]\n    ],\n    [PUZZLE_MODE_5X5]: []\n  };","export const\n\n  shuffle = squares => {\n    const m = squares.length;\n    let t;\n    for (let i = 0; i < m; i++) {\n      let n = squares[i].length, k = Math.floor(Math.random() * i), l;\n      for (let j = 0; j < n; j++) {\n        l = Math.floor(Math.random() * j);\n        t = squares[i][j];\n        squares[i][j] = squares[k][l];\n        squares[k][l] = t;\n      }\n    }\n    return squares;\n  },\n\n  getPositionZero = squares => {\n    let position = {}, l = squares.length;\n    for (let i = 0; i < l; i++)\n      for (let j = 0; j < l; j++) {\n        if (squares[i][j] === 0)\n          position = {i, j};\n      }\n\n    return position;\n  }\n\n;","import {STORAGE_DATABASE, STORAGE_CONFIG_DATABASE, PUZZLE_MODE_3X3} from \"../utils/constants\";\n\nexport\n  const Storage = {\n    db: localStorage.getItem(STORAGE_DATABASE),\n    response: () => ({status: 1, message: \"\"}),\n    connect: () => {\n      if (!(\"localStorage\" in window)) {\n        alert(\"Erro ao conectar!\");\n        return;\n      }\n\n      Storage.createDB();\n    },\n    getLastId: () => Storage.get().length,\n    createDB: () => {\n      if (Storage.db && Storage.db.length)\n        return;\n\n      localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n    },\n    insert: (game) => {\n      let g = Storage.get();\n      if (g.filter(gg => gg.id === game.id).length)\n        return;\n\n      for (let i = 0; i < g.length; i++)\n        if (g[i].status === \"saved\")\n          g[i].status = \"stop\";\n\n      g.push(game);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n    },\n    update: ({id, status, puzzle, steps}) => {\n      const game = Storage.get();\n      const g = game.filter(dd => dd.id === id).map(dd => {\n        dd.status = status;\n        dd.puzzle = puzzle;\n        dd.steps = steps;\n        return dd;\n      });\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    delete: id => {\n      const d = Storage.get();\n      const game = d.filter(dd => dd.id !== id);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n  };\n\nconst Data = {\n  push: (data) => JSON.stringify(data),\n  pull: (data) => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};","import React, { Component, Fragment } from \"react\";\nimport GameView from \"./views/GameView\";\nimport ModalWinner from \"./components/ModalWinner\";\nimport IntroView from \"./views/IntroView\";\nimport ModalConfig from \"./components/ModalConfig\";\n\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\n\nimport { PUZZLE_MODE_3X3 } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport {getPositionZero, shuffle} from \"./utils\";\nimport {Storage} from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: {\n        id: 0,\n        squares: [],\n        steps: 0,\n        status: \"stop\"\n      },\n      squares: [],\n      steps: 0,\n      status: \"stop\",\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    Storage.connect();\n    const puzzle = Storage.get();\n\n    if (puzzle.length && puzzle.filter(p => p.status === \"saved\").length)\n      this.setState(state => ({\n        ...state,\n        game: {\n          squares: puzzle.filter(p => p.status === \"saved\").map(p => p.puzzle)[0],\n          status: puzzle.filter(p => p.status === \"saved\").map(p => p.status)[0],\n          steps: puzzle.filter(p => p.status === \"saved\").map(p => p.steps)[0],\n          id: puzzle.filter(p => p.status === \"saved\").map(p => p.id)[0]\n        }\n      }));\n  }\n\n  handleStart = () => {\n    const squares = shuffle(Puzzles[PUZZLE_MODE_3X3]);\n    const id = Storage.getLastId() + 1;\n\n    Storage.insert({id, status: \"start\", puzzle: squares, steps: 0});\n    this.setState({game: {status: \"start\", squares: squares, steps: 0, id}});\n  };\n\n  handleExit = () => {\n    Storage.delete(Storage.getLastId());\n    this.setState({\n      game: {\n        status: \"stop\",\n        steps: 0,\n        puzzle: []\n      },\n      winner: false,\n    });\n  };\n\n  handleSaveAndExit = (game) => {\n    Storage.update({id: game.id, status: \"saved\", puzzle: game.squares, steps: game.steps});\n    this.setState({game: {status: \"saved\", steps: game.steps, squares: game.squares,}});\n  };\n\n  handleReset = () => {\n    this.setState(state => ({\n      ...state,\n      game: {\n        ...state.game,\n        squares: shuffle(Puzzles[PUZZLE_MODE_3X3]),\n        steps: 0\n      }\n    }));\n  };\n\n  validateColumnAndRow = (position, zero) =>\n    (position.i === zero.i && Math.abs(position.j - zero.j) === 1)\n    || (position.j === zero.j && Math.abs(position.i - zero.i) === 1);\n\n  validateWinner = squares => {\n    let\n      counter = 0,\n      winner = false;\n\n    const le = (squares.length * (squares[squares.length - 1].length));\n\n    for(let i = 0;i < squares.length;i++)\n      for(let j = 0;j < squares[i].length; j++)\n        if (squares[i][j] === Answers[PUZZLE_MODE_3X3][i][j])\n          counter++;\n\n    if (counter < le)\n      counter = 0;\n    if (counter === le)\n      winner = true;\n\n    return winner;\n  };\n\n  handleClickSquare = (value, position) => {\n    let squares = this.state.game.squares;\n    const zero = getPositionZero(squares);\n\n    if (value === 0 || !(this.validateColumnAndRow(position, zero))) {\n      return;\n    }\n    squares[position.i][position.j] = 0;\n    squares[zero.i][zero.j] = value;\n\n    const winner = this.validateWinner(squares);\n\n    this.setState(state => ({\n      ...state,\n      game: {\n        ...state.game,\n        squares,\n        steps: state.game.steps + 1,\n      },\n      winner,\n      openWinner: winner\n    }));\n  };\n\n  handleContinue = () =>\n    this.setState(state => ({\n      ...state,\n      game: {\n        ...state.game,\n        status: \"start\"\n      }\n    }));\n\n  handleCloseWinner = () =>\n    this.setState({openWinner: false});\n\n  render() {\n    const {game, winner, openWinner} = this.state;\n    const { status, squares, steps } = game;\n\n    return (\n      <Fragment>\n        <ModalWinner\n          open={openWinner}\n          winner={winner}\n          steps={steps}\n          onClose={this.handleCloseWinner}\n        />\n        <IntroView\n          squares={squares}\n          status={status}\n          onStart={this.handleStart}\n          onContinue={this.handleContinue}\n        />\n        <GameView\n          status={status}\n          winner={winner}\n          game={game}\n          squares={squares}\n          steps={steps}\n          onExit={this.handleExit}\n          onSaveAndExit={this.handleSaveAndExit}\n          onReset={this.handleReset}\n          onClickSquare={this.handleClickSquare}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}