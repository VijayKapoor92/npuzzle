{"ast":null,"code":"import _defineProperty from \"/Users/vijaykapoor/Documents/github/npuzzle/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vijaykapoor/Documents/github/npuzzle/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport ModalWinner from \"./components/ModalWinner\";\nimport ModalConfig from \"./components/ModalConfig\";\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\nimport { PUZZLE_MODE_3X3 } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport { getPositionZero, shuffle } from \"./utils\";\nimport { Storage } from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = () => {\n      const squares = shuffle(Puzzles[PUZZLE_MODE_3X3]);\n      const id = Storage.getLastId() + 1;\n      Storage.insert({\n        id,\n        status: \"start\",\n        puzzle: squares,\n        steps: 0\n      });\n      this.setState({\n        game: {\n          status: \"start\",\n          squares: squares,\n          steps: 0,\n          id\n        }\n      });\n    };\n\n    this.handleExit = () => {\n      Storage.delete(Storage.getLastId());\n      this.setState({\n        game: {\n          status: \"stop\",\n          steps: 0,\n          puzzle: []\n        },\n        winner: false\n      });\n    };\n\n    this.handleSaveAndExit = game => {\n      Storage.update({\n        id: game.id,\n        status: \"saved\",\n        puzzle: game.squares,\n        steps: game.steps\n      });\n      this.setState({\n        game: {\n          status: \"saved\",\n          steps: game.steps,\n          squares: game.squares\n        }\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState(state => ({\n        squares: shuffle(Puzzles[PUZZLE_MODE_3X3]),\n        steps: 0\n      }));\n    };\n\n    this.validateColumnAndRow = (position, zero) => position.i === zero.i && Math.abs(position.j - zero.j) === 1 || position.j === zero.j && Math.abs(position.i - zero.i) === 1;\n\n    this.validateWinner = squares => {\n      let counter = 0,\n          winner = false;\n      const le = squares.length * squares[squares.length - 1].length;\n\n      for (let i = 0; i < squares.length; i++) for (let j = 0; j < squares[i].length; j++) if (squares[i][j] === Answers[PUZZLE_MODE_3X3][i][j]) counter++;\n\n      if (counter < le) counter = 0;\n      if (counter === le) winner = true;\n      return winner;\n    };\n\n    this.handleClickSquare = (value, position) => {\n      let squares = this.state.game.squares;\n      const zero = getPositionZero(squares);\n\n      if (value === 0 || !this.validateColumnAndRow(position, zero)) {\n        return;\n      }\n\n      squares[position.i][position.j] = 0;\n      squares[zero.i][zero.j] = value;\n      const winner = this.validateWinner(squares);\n      this.setState(state => _objectSpread({}, state, {\n        game: _objectSpread({}, state.game, {\n          squares,\n          steps: state.game.steps + 1\n        }),\n        winner,\n        openWinner: winner\n      }));\n    };\n\n    this.handleContinue = () => this.setState(state => _objectSpread({}, state, {\n      game: _objectSpread({}, state.game, {\n        status: \"start\"\n      })\n    }));\n\n    this.handleCloseWinner = () => this.setState({\n      openWinner: false\n    });\n\n    this.handleOpenConfig = () => this.setState({\n      isConfigOpen: true\n    });\n\n    this.handleCloseConfig = () => this.setState({\n      isConfigOpen: false\n    });\n\n    this.handleChangeMode = e => {\n      const mode = e.target.value;\n      StorageConfig.update(mode);\n      this.setState({\n        mode\n      });\n    };\n\n    this.renderFirstPage = (squares, status) => React.createElement(\"div\", {\n      className: \"first-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"first-page__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"N-PUZZLE\"), React.createElement(\"div\", {\n      className: \"first-page__subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Venha se divertir\"), React.createElement(\"div\", {\n      className: \"first-page__action-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, status === \"saved\" ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleContinue(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Continuar jogo salvo\"), React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleStart(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Novo jogo\")) : React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleStart(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Novo jogo\"), React.createElement(\"button\", {\n      className: \"btn-config\",\n      onClick: this.handleOpenConfig,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(SettingsIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))));\n\n    this.state = {\n      game: {\n        id: 0,\n        squares: [],\n        steps: 0,\n        status: \"stop\"\n      },\n      mode: \"\",\n      squares: [],\n      steps: 0,\n      status: \"stop\",\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    Storage.connect();\n    const puzzle = Storage.get();\n    if (puzzle.length && puzzle.filter(p => p.status === \"saved\").length) this.setState(state => _objectSpread({}, state, {\n      game: {\n        squares: puzzle.filter(p => p.status === \"saved\").map(p => p.puzzle)[0],\n        status: puzzle.filter(p => p.status === \"saved\").map(p => p.status)[0],\n        steps: puzzle.filter(p => p.status === \"saved\").map(p => p.steps)[0],\n        id: puzzle.filter(p => p.status === \"saved\").map(p => p.id)[0]\n      }\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          game = _this$state.game,\n          isConfigOpen = _this$state.isConfigOpen,\n          winner = _this$state.winner,\n          openWinner = _this$state.openWinner,\n          mode = _this$state.mode;\n    const status = game.status,\n          squares = game.squares,\n          steps = game.steps; //todo: logica para configuracoes.\n    //todo: criar as views (IntroView e GameView).\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(ModalConfig, {\n      open: isConfigOpen,\n      mode: mode,\n      onChange: this.handleChangeMode,\n      onClose: this.handleCloseConfig,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(ModalWinner, {\n      open: openWinner,\n      winner: winner,\n      steps: steps,\n      onClose: this.handleCloseWinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), status === \"start\" ? React.createElement(Game, {\n      game: game,\n      winner: winner,\n      squares: squares,\n      steps: steps,\n      onExit: this.handleExit,\n      onSaveAndExit: this.handleSaveAndExit,\n      onReset: this.handleReset,\n      onClickSquare: this.handleClickSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }) : this.renderFirstPage(squares, status));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/App.js"],"names":["React","Component","Fragment","Game","ModalWinner","ModalConfig","SettingsIcon","PUZZLE_MODE_3X3","Puzzles","Answers","getPositionZero","shuffle","Storage","App","constructor","props","handleStart","squares","id","getLastId","insert","status","puzzle","steps","setState","game","handleExit","delete","winner","handleSaveAndExit","update","handleReset","state","validateColumnAndRow","position","zero","i","Math","abs","j","validateWinner","counter","le","length","handleClickSquare","value","openWinner","handleContinue","handleCloseWinner","handleOpenConfig","isConfigOpen","handleCloseConfig","handleChangeMode","e","mode","target","StorageConfig","renderFirstPage","isWinner","componentDidMount","connect","get","filter","p","map","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport ModalWinner from \"./components/ModalWinner\";\nimport ModalConfig from \"./components/ModalConfig\";\n\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\n\nimport { PUZZLE_MODE_3X3 } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport {getPositionZero, shuffle} from \"./utils\";\nimport {Storage} from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: {\n        id: 0,\n        squares: [],\n        steps: 0,\n        status: \"stop\"\n      },\n      mode: \"\",\n      squares: [],\n      steps: 0,\n      status: \"stop\",\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    Storage.connect();\n    const puzzle = Storage.get();\n\n    if (puzzle.length && puzzle.filter(p => p.status === \"saved\").length)\n      this.setState(state => ({\n        ...state,\n        game: {\n          squares: puzzle.filter(p => p.status === \"saved\").map(p => p.puzzle)[0],\n          status: puzzle.filter(p => p.status === \"saved\").map(p => p.status)[0],\n          steps: puzzle.filter(p => p.status === \"saved\").map(p => p.steps)[0],\n          id: puzzle.filter(p => p.status === \"saved\").map(p => p.id)[0]\n        }\n      }));\n  }\n\n  handleStart = () => {\n    const squares = shuffle(Puzzles[PUZZLE_MODE_3X3]);\n    const id = Storage.getLastId() + 1;\n\n    Storage.insert({id, status: \"start\", puzzle: squares, steps: 0});\n    this.setState({game: {status: \"start\", squares: squares, steps: 0, id}});\n  };\n\n  handleExit = () => {\n    Storage.delete(Storage.getLastId());\n    this.setState({\n      game: {\n        status: \"stop\",\n        steps: 0,\n        puzzle: []\n      },\n      winner: false,\n    });\n  };\n\n  handleSaveAndExit = (game) => {\n    Storage.update({id: game.id, status: \"saved\", puzzle: game.squares, steps: game.steps});\n    this.setState({game: {status: \"saved\", steps: game.steps, squares: game.squares,}});\n  };\n\n  handleReset = () => {\n    this.setState(state => ({\n      squares: shuffle(Puzzles[PUZZLE_MODE_3X3]),\n      steps: 0\n    }));\n  };\n\n  validateColumnAndRow = (position, zero) =>\n    (position.i === zero.i && Math.abs(position.j - zero.j) === 1)\n    || (position.j === zero.j && Math.abs(position.i - zero.i) === 1);\n\n  validateWinner = squares => {\n    let\n      counter = 0,\n      winner = false;\n\n    const le = (squares.length * (squares[squares.length - 1].length));\n\n    for(let i = 0;i < squares.length;i++)\n      for(let j = 0;j < squares[i].length; j++)\n        if (squares[i][j] === Answers[PUZZLE_MODE_3X3][i][j])\n          counter++;\n\n    if (counter < le)\n      counter = 0;\n    if (counter === le)\n      winner = true;\n\n    return winner;\n  };\n\n  handleClickSquare = (value, position) => {\n    let squares = this.state.game.squares;\n    const zero = getPositionZero(squares);\n\n    if (value === 0 || !(this.validateColumnAndRow(position, zero))) {\n      return;\n    }\n    squares[position.i][position.j] = 0;\n    squares[zero.i][zero.j] = value;\n\n    const winner = this.validateWinner(squares);\n\n    this.setState(state => ({\n      ...state,\n      game: {\n        ...state.game,\n        squares,\n        steps: state.game.steps + 1,\n      },\n      winner,\n      openWinner: winner\n    }));\n  };\n\n  handleContinue = () =>\n    this.setState(state => ({\n      ...state,\n      game: {\n        ...state.game,\n        status: \"start\"\n      }\n    }));\n\n  handleCloseWinner = () =>\n    this.setState({openWinner: false});\n\n  handleOpenConfig = () =>\n    this.setState({isConfigOpen: true});\n\n  handleCloseConfig = () =>\n    this.setState({isConfigOpen: false});\n\n  handleChangeMode = e => {\n    const mode = e.target.value;\n    StorageConfig.update(mode);\n    this.setState({ mode });\n  };\n\n  renderFirstPage = (squares, status) =>\n    <div className=\"first-page\">\n      <div className=\"first-page__title\">N-PUZZLE</div>\n      <div className=\"first-page__subtitle\">Venha se divertir</div>\n      <div className=\"first-page__action-container\">\n        {status === \"saved\" ? (\n          <Fragment>\n            <button className=\"btn-start\" onClick={() => this.handleContinue(squares)}>Continuar jogo salvo</button>\n            <button className=\"btn-start\" onClick={() => this.handleStart(squares)}>Novo jogo</button>\n          </Fragment>\n        ) : (\n          <button className=\"btn-start\" onClick={() => this.handleStart(squares)}>Novo jogo</button>\n        )}\n        <button className=\"btn-config\" onClick={this.handleOpenConfig}>\n          <SettingsIcon/>\n        </button>\n      </div>\n    </div>;\n\n  render() {\n    const {game, isConfigOpen, winner, openWinner, mode} = this.state;\n    const { status, squares, steps } = game;\n\n    //todo: logica para configuracoes.\n    //todo: criar as views (IntroView e GameView).\n\n    return (\n      <Fragment>\n        <ModalConfig\n          open={isConfigOpen}\n          mode={mode}\n          onChange={this.handleChangeMode}\n          onClose={this.handleCloseConfig}\n        />\n        <ModalWinner\n          open={openWinner}\n          winner={winner}\n          steps={steps}\n          onClose={this.handleCloseWinner}\n        />\n        {status === \"start\" ? (\n          <Game\n            game={game}\n            winner={winner}\n            squares={squares}\n            steps={steps}\n            onExit={this.handleExit}\n            onSaveAndExit={this.handleSaveAndExit}\n            onReset={this.handleReset}\n            onClickSquare={this.handleClickSquare}\n          />\n        ) : (\n          this.renderFirstPage(squares, status)\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}