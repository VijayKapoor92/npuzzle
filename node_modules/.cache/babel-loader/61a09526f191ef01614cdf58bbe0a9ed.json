{"ast":null,"code":"import _defineProperty from \"/Users/vijaykapoor/Documents/github/npuzzle/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vijaykapoor/Documents/github/npuzzle/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport WinnerContainer from \"./components/WinnerContainer\";\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\nimport CloseIcon from \"react-icons/lib/fa/close\";\nimport TrophyIcon from \"react-icons/lib/fa/trophy\";\nimport { PUZZLE_MODE_EASY } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport { getPositionZero, shuffle } from \"./utils\";\nimport { Storage } from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = squares => {\n      console.log();\n      Storage.insert({\n        id: Storage.getLastId() + 1,\n        status: \"start\",\n        puzzle: shuffle(squares),\n        steps: 0\n      });\n      this.setState({\n        status: \"start\",\n        squares: shuffle(squares),\n        steps: 0\n      });\n    };\n\n    this.handleExit = () => this.setState({\n      status: \"stop\",\n      winner: false,\n      steps: 0\n    });\n\n    this.handleSaveAndExit = (puzzle, steps) => {\n      Storage.update({\n        id: 1,\n        status: \"saved\",\n        puzzle,\n        steps\n      });\n      this.setState({\n        status: \"saved\"\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState(state => ({\n        squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n        steps: 0\n      }));\n    };\n\n    this.validateColumnAndRow = (position, zero) => position.i === zero.i && Math.abs(position.j - zero.j) === 1 || position.j === zero.j && Math.abs(position.i - zero.i) === 1;\n\n    this.validateWinner = squares => {\n      let counter = 0,\n          winner = false;\n      const le = squares.length * squares[squares.length - 1].length;\n\n      for (let i = 0; i < squares.length; i++) for (let j = 0; j < squares[i].length; j++) if (squares[i][j] === Answers[PUZZLE_MODE_EASY][i][j]) counter++;\n\n      if (counter < le) counter = 0;\n      if (counter === le) winner = true;\n      return winner;\n    };\n\n    this.handleClickSquare = (value, position) => {\n      let squares = this.state.squares;\n      const zero = getPositionZero(squares);\n\n      if (value === 0 || !this.validateColumnAndRow(position, zero)) {\n        return;\n      }\n\n      squares[position.i][position.j] = 0;\n      squares[zero.i][zero.j] = value;\n      const winner = this.validateWinner(squares);\n      this.setState(state => _objectSpread({}, state, {\n        squares,\n        steps: state.steps + 1,\n        winner,\n        openWinner: winner\n      }));\n    };\n\n    this.handleContinue = () => {\n      this.setState({\n        status: \"start\"\n      });\n    };\n\n    this.handleCloseWinner = () => this.setState({\n      openWinner: false\n    });\n\n    this.handleOpenConfig = () => this.setState({\n      isConfigOpen: true\n    });\n\n    this.renderFirstPage = (squares, status) => React.createElement(\"div\", {\n      className: \"first-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"first-page__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"N-PUZZLE\"), React.createElement(\"div\", {\n      className: \"first-page__subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Venha se divertir\"), React.createElement(\"div\", {\n      className: \"first-page__action-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, status === \"saved\" ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleContinue(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Continuar jogo salvo\"), React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleStart(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Novo jogo\")) : React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: () => this.handleStart(squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Novo jogo\")));\n\n    this.renderConfig = () => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"N\\xEDvel:\"), React.createElement(\"select\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"F\\xE1cil\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"M\\xE9dio\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Dif\\xEDcil\"))));\n\n    this.state = {\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0,\n      status: \"stop\",\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    Storage.connect();\n    const puzzle = Storage.get();\n    if (puzzle.length && puzzle.filter(p => p.status === \"saved\").length) this.setState({\n      puzzle: puzzle.map(p => p.puzzle)[0],\n      status: puzzle.map(p => p.status)[0],\n      steps: puzzle.map(p => p.steps)[0]\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          status = _this$state.status,\n          squares = _this$state.squares,\n          steps = _this$state.steps,\n          isConfigOpen = _this$state.isConfigOpen,\n          winner = _this$state.winner,\n          openWinner = _this$state.openWinner; //todo: logica para salvar o jogo e sair.\n    //todo: criar as views (IntroView e GameView).\n    //todo: logica para configuracoes.\n\n    console.log(status);\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, isConfigOpen && this.renderConfig(), React.createElement(WinnerContainer, {\n      open: openWinner,\n      steps: steps,\n      onClose: this.handleCloseWinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), status === \"start\" ? React.createElement(Game, {\n      winner: winner,\n      squares: squares,\n      steps: steps,\n      onExit: this.handleExit,\n      onSaveAndExit: this.handleSaveAndExit,\n      onReset: this.handleReset,\n      onClickSquare: this.handleClickSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }) : this.renderFirstPage(squares, status));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/App.js"],"names":["React","Component","Fragment","Game","WinnerContainer","SettingsIcon","CloseIcon","TrophyIcon","PUZZLE_MODE_EASY","Puzzles","Answers","getPositionZero","shuffle","Storage","App","constructor","props","handleStart","squares","console","log","insert","id","getLastId","status","puzzle","steps","setState","handleExit","winner","handleSaveAndExit","update","handleReset","state","validateColumnAndRow","position","zero","i","Math","abs","j","validateWinner","counter","le","length","handleClickSquare","value","openWinner","handleContinue","handleCloseWinner","handleOpenConfig","isConfigOpen","renderFirstPage","renderConfig","isWinner","componentDidMount","connect","get","filter","p","map","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;AACA,SAAQC,eAAR,EAAyBC,OAAzB,QAAuC,SAAvC;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,MAAMC,GAAN,SAAkBb,SAAlB,CAA4B;AAC1Bc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,WAvBmB,GAuBLC,OAAO,IAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR;AACAP,MAAAA,OAAO,CAACQ,MAAR,CAAe;AAACC,QAAAA,EAAE,EAAET,OAAO,CAACU,SAAR,KAAsB,CAA3B;AAA8BC,QAAAA,MAAM,EAAE,OAAtC;AAA+CC,QAAAA,MAAM,EAAEb,OAAO,CAACM,OAAD,CAA9D;AAAyEQ,QAAAA,KAAK,EAAE;AAAhF,OAAf;AACA,WAAKC,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAE,OAAT;AAAkBN,QAAAA,OAAO,EAAEN,OAAO,CAACM,OAAD,CAAlC;AAA6CQ,QAAAA,KAAK,EAAE;AAApD,OAAd;AACD,KA3BkB;;AAAA,SA6BnBE,UA7BmB,GA6BN,MACX,KAAKD,QAAL,CAAc;AACZH,MAAAA,MAAM,EAAE,MADI;AAEZK,MAAAA,MAAM,EAAE,KAFI;AAGZH,MAAAA,KAAK,EAAE;AAHK,KAAd,CA9BiB;;AAAA,SAoCnBI,iBApCmB,GAoCC,CAACL,MAAD,EAASC,KAAT,KAAmB;AACrCb,MAAAA,OAAO,CAACkB,MAAR,CAAe;AAACT,QAAAA,EAAE,EAAE,CAAL;AAAQE,QAAAA,MAAM,EAAE,OAAhB;AAAyBC,QAAAA,MAAzB;AAAiCC,QAAAA;AAAjC,OAAf;AACA,WAAKC,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAd;AACD,KAvCkB;;AAAA,SAyCnBQ,WAzCmB,GAyCL,MAAM;AAClB,WAAKL,QAAL,CAAcM,KAAK,KAAK;AACtBf,QAAAA,OAAO,EAAEN,OAAO,CAACH,OAAO,CAACD,gBAAD,CAAR,CADM;AAEtBkB,QAAAA,KAAK,EAAE;AAFe,OAAL,CAAnB;AAID,KA9CkB;;AAAA,SAgDnBQ,oBAhDmB,GAgDI,CAACC,QAAD,EAAWC,IAAX,KACpBD,QAAQ,CAACE,CAAT,KAAeD,IAAI,CAACC,CAApB,IAAyBC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACK,CAAT,GAAaJ,IAAI,CAACI,CAA3B,MAAkC,CAA5D,IACIL,QAAQ,CAACK,CAAT,KAAeJ,IAAI,CAACI,CAApB,IAAyBF,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACE,CAAT,GAAaD,IAAI,CAACC,CAA3B,MAAkC,CAlD9C;;AAAA,SAoDnBI,cApDmB,GAoDFvB,OAAO,IAAI;AAC1B,UACEwB,OAAO,GAAG,CADZ;AAAA,UAEEb,MAAM,GAAG,KAFX;AAIA,YAAMc,EAAE,GAAIzB,OAAO,CAAC0B,MAAR,GAAkB1B,OAAO,CAACA,OAAO,CAAC0B,MAAR,GAAiB,CAAlB,CAAP,CAA4BA,MAA1D;;AAEA,WAAI,IAAIP,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAGnB,OAAO,CAAC0B,MAA1B,EAAiCP,CAAC,EAAlC,EACE,KAAI,IAAIG,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAGtB,OAAO,CAACmB,CAAD,CAAP,CAAWO,MAA7B,EAAqCJ,CAAC,EAAtC,EACE,IAAItB,OAAO,CAACmB,CAAD,CAAP,CAAWG,CAAX,MAAkB9B,OAAO,CAACF,gBAAD,CAAP,CAA0B6B,CAA1B,EAA6BG,CAA7B,CAAtB,EACEE,OAAO;;AAEb,UAAIA,OAAO,GAAGC,EAAd,EACED,OAAO,GAAG,CAAV;AACF,UAAIA,OAAO,KAAKC,EAAhB,EACEd,MAAM,GAAG,IAAT;AAEF,aAAOA,MAAP;AACD,KAtEkB;;AAAA,SAwEnBgB,iBAxEmB,GAwEC,CAACC,KAAD,EAAQX,QAAR,KAAqB;AACvC,UAAIjB,OAAO,GAAG,KAAKe,KAAL,CAAWf,OAAzB;AACA,YAAMkB,IAAI,GAAGzB,eAAe,CAACO,OAAD,CAA5B;;AAEA,UAAI4B,KAAK,KAAK,CAAV,IAAe,CAAE,KAAKZ,oBAAL,CAA0BC,QAA1B,EAAoCC,IAApC,CAArB,EAAiE;AAC/D;AACD;;AACDlB,MAAAA,OAAO,CAACiB,QAAQ,CAACE,CAAV,CAAP,CAAoBF,QAAQ,CAACK,CAA7B,IAAkC,CAAlC;AACAtB,MAAAA,OAAO,CAACkB,IAAI,CAACC,CAAN,CAAP,CAAgBD,IAAI,CAACI,CAArB,IAA0BM,KAA1B;AAEA,YAAMjB,MAAM,GAAG,KAAKY,cAAL,CAAoBvB,OAApB,CAAf;AAEA,WAAKS,QAAL,CAAcM,KAAK,sBACdA,KADc;AAEjBf,QAAAA,OAFiB;AAGjBQ,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,GAAc,CAHJ;AAIjBG,QAAAA,MAJiB;AAKjBkB,QAAAA,UAAU,EAAElB;AALK,QAAnB;AAOD,KA3FkB;;AAAA,SA6FnBmB,cA7FmB,GA6FF,MAAM;AACrB,WAAKrB,QAAL,CAAc;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAd;AACD,KA/FkB;;AAAA,SAiGnByB,iBAjGmB,GAiGC,MAClB,KAAKtB,QAAL,CAAc;AAACoB,MAAAA,UAAU,EAAE;AAAb,KAAd,CAlGiB;;AAAA,SAoGnBG,gBApGmB,GAoGA,MACjB,KAAKvB,QAAL,CAAc;AAACwB,MAAAA,YAAY,EAAE;AAAf,KAAd,CArGiB;;AAAA,SAuGnBC,eAvGmB,GAuGD,CAAClC,OAAD,EAAUM,MAAV,KAChB;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MAAM,KAAK,OAAX,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,MAAM,KAAKwB,cAAL,CAAoB9B,OAApB,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,MAAM,KAAKD,WAAL,CAAiBC,OAAjB,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADD,GAMC;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,MAAM,KAAKD,WAAL,CAAiBC,OAAjB,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPJ,CAHF,CAxGiB;;AAAA,SA0HnBmC,YA1HmB,GA0HJ,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,CAFF,CAFF,CA3HiB;;AAEjB,SAAKpB,KAAL,GAAa;AACXf,MAAAA,OAAO,EAAEN,OAAO,CAACH,OAAO,CAACD,gBAAD,CAAR,CADL;AAEXkB,MAAAA,KAAK,EAAE,CAFI;AAGXF,MAAAA,MAAM,EAAE,MAHG;AAIX2B,MAAAA,YAAY,EAAE,KAJH;AAKXG,MAAAA,QAAQ,EAAE,KALC;AAMXP,MAAAA,UAAU,EAAE;AAND,KAAb;AAQD;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB1C,IAAAA,OAAO,CAAC2C,OAAR;AACA,UAAM/B,MAAM,GAAGZ,OAAO,CAAC4C,GAAR,EAAf;AACA,QAAIhC,MAAM,CAACmB,MAAP,IAAiBnB,MAAM,CAACiC,MAAP,CAAcC,CAAC,IAAIA,CAAC,CAACnC,MAAF,KAAa,OAAhC,EAAyCoB,MAA9D,EACE,KAAKjB,QAAL,CAAc;AACZF,MAAAA,MAAM,EAAEA,MAAM,CAACmC,GAAP,CAAWD,CAAC,IAAIA,CAAC,CAAClC,MAAlB,EAA0B,CAA1B,CADI;AAEZD,MAAAA,MAAM,EAAEC,MAAM,CAACmC,GAAP,CAAWD,CAAC,IAAIA,CAAC,CAACnC,MAAlB,EAA0B,CAA1B,CAFI;AAGZE,MAAAA,KAAK,EAAED,MAAM,CAACmC,GAAP,CAAWD,CAAC,IAAIA,CAAC,CAACjC,KAAlB,EAAyB,CAAzB;AAHK,KAAd;AAKH;;AAkHDmC,EAAAA,MAAM,GAAG;AAAA,wBAC4D,KAAK5B,KADjE;AAAA,UACAT,MADA,eACAA,MADA;AAAA,UACQN,OADR,eACQA,OADR;AAAA,UACiBQ,KADjB,eACiBA,KADjB;AAAA,UACwByB,YADxB,eACwBA,YADxB;AAAA,UACsCtB,MADtC,eACsCA,MADtC;AAAA,UAC8CkB,UAD9C,eAC8CA,UAD9C,EAGP;AACA;AACA;;AAEA5B,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AAEA,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG2B,YAAY,IAAI,KAAKE,YAAL,EADnB,EAEE,oBAAC,eAAD;AACE,MAAA,IAAI,EAAEN,UADR;AAEE,MAAA,KAAK,EAAErB,KAFT;AAGE,MAAA,OAAO,EAAE,KAAKuB,iBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAOGzB,MAAM,KAAK,OAAX,GACC,oBAAC,IAAD;AACE,MAAA,MAAM,EAAEK,MADV;AAEE,MAAA,OAAO,EAAEX,OAFX;AAGE,MAAA,KAAK,EAAEQ,KAHT;AAIE,MAAA,MAAM,EAAE,KAAKE,UAJf;AAKE,MAAA,aAAa,EAAE,KAAKE,iBALtB;AAME,MAAA,OAAO,EAAE,KAAKE,WANhB;AAOE,MAAA,aAAa,EAAE,KAAKa,iBAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAWC,KAAKO,eAAL,CAAqBlC,OAArB,EAA8BM,MAA9B,CAlBJ,CADF;AAuBD;;AAxKyB;;AA2K5B,eAAeV,GAAf","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport WinnerContainer from \"./components/WinnerContainer\";\n\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\nimport CloseIcon from \"react-icons/lib/fa/close\";\nimport TrophyIcon from \"react-icons/lib/fa/trophy\";\n\nimport { PUZZLE_MODE_EASY } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport {getPositionZero, shuffle} from \"./utils\";\nimport { Storage } from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0,\n      status: \"stop\",\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    Storage.connect();\n    const puzzle = Storage.get();\n    if (puzzle.length && puzzle.filter(p => p.status === \"saved\").length)\n      this.setState({\n        puzzle: puzzle.map(p => p.puzzle)[0],\n        status: puzzle.map(p => p.status)[0],\n        steps: puzzle.map(p => p.steps)[0]\n      });\n  }\n\n  handleStart = squares => {\n    console.log();\n    Storage.insert({id: Storage.getLastId() + 1, status: \"start\", puzzle: shuffle(squares), steps: 0});\n    this.setState({status: \"start\", squares: shuffle(squares), steps: 0});\n  };\n\n  handleExit = () =>\n    this.setState({\n      status: \"stop\",\n      winner: false,\n      steps: 0\n    });\n\n  handleSaveAndExit = (puzzle, steps) => {\n    Storage.update({id: 1, status: \"saved\", puzzle, steps});\n    this.setState({status: \"saved\"});\n  };\n\n  handleReset = () => {\n    this.setState(state => ({\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0\n    }));\n  };\n\n  validateColumnAndRow = (position, zero) =>\n    (position.i === zero.i && Math.abs(position.j - zero.j) === 1)\n    || (position.j === zero.j && Math.abs(position.i - zero.i) === 1);\n\n  validateWinner = squares => {\n    let\n      counter = 0,\n      winner = false;\n\n    const le = (squares.length * (squares[squares.length - 1].length));\n\n    for(let i = 0;i < squares.length;i++)\n      for(let j = 0;j < squares[i].length; j++)\n        if (squares[i][j] === Answers[PUZZLE_MODE_EASY][i][j])\n          counter++;\n\n    if (counter < le)\n      counter = 0;\n    if (counter === le)\n      winner = true;\n\n    return winner;\n  };\n\n  handleClickSquare = (value, position) => {\n    let squares = this.state.squares;\n    const zero = getPositionZero(squares);\n\n    if (value === 0 || !(this.validateColumnAndRow(position, zero))) {\n      return;\n    }\n    squares[position.i][position.j] = 0;\n    squares[zero.i][zero.j] = value;\n\n    const winner = this.validateWinner(squares);\n\n    this.setState(state => ({\n      ...state,\n      squares,\n      steps: state.steps + 1,\n      winner,\n      openWinner: winner\n    }));\n  };\n\n  handleContinue = () => {\n    this.setState({status: \"start\"});\n  };\n\n  handleCloseWinner = () =>\n    this.setState({openWinner: false});\n\n  handleOpenConfig = () =>\n    this.setState({isConfigOpen: true});\n\n  renderFirstPage = (squares, status) =>\n    <div className=\"first-page\">\n      <div className=\"first-page__title\">N-PUZZLE</div>\n      <div className=\"first-page__subtitle\">Venha se divertir</div>\n      <div className=\"first-page__action-container\">\n        {status === \"saved\" ? (\n          <Fragment>\n            <button className=\"btn-start\" onClick={() => this.handleContinue(squares)}>Continuar jogo salvo</button>\n            <button className=\"btn-start\" onClick={() => this.handleStart(squares)}>Novo jogo</button>\n          </Fragment>\n        ) : (\n          <button className=\"btn-start\" onClick={() => this.handleStart(squares)}>Novo jogo</button>\n        )}\n        {/*<button className=\"btn-config\" onClick={this.handleOpenConfig}>\n          <SettingsIcon/>\n        </button>*/}\n      </div>\n    </div>;\n\n  renderConfig = () =>\n    <div>\n      <div>Configurações</div>\n      <div>\n        <label>Nível:</label>\n        <select>\n          <option>Fácil</option>\n          <option>Médio</option>\n          <option>Difícil</option>\n        </select>\n      </div>\n    </div>;\n\n  render() {\n    const {status, squares, steps, isConfigOpen, winner, openWinner} = this.state;\n\n    //todo: logica para salvar o jogo e sair.\n    //todo: criar as views (IntroView e GameView).\n    //todo: logica para configuracoes.\n\n    console.log(status);\n\n    return (\n      <Fragment>\n        {isConfigOpen && this.renderConfig()}\n        <WinnerContainer\n          open={openWinner}\n          steps={steps}\n          onClose={this.handleCloseWinner}\n        />\n        {status === \"start\" ? (\n          <Game\n            winner={winner}\n            squares={squares}\n            steps={steps}\n            onExit={this.handleExit}\n            onSaveAndExit={this.handleSaveAndExit}\n            onReset={this.handleReset}\n            onClickSquare={this.handleClickSquare}\n          />\n        ) : (\n          this.renderFirstPage(squares, status)\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}