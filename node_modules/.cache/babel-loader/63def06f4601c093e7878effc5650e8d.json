{"ast":null,"code":"const STORAGE_DATABASE = \"game\",\n      STORAGE_CONFIG_DATABASE = \"config\";\nexport const Storage = {\n  db: localStorage.getItem(STORAGE_DATABASE),\n  db_config: localStorage.getItem(STORAGE_CONFIG_DATABASE),\n  response: () => ({\n    status: 1,\n    message: \"\"\n  }),\n  connect: () => {\n    if (!(\"localStorage\" in window)) {\n      alert(\"Erro ao conectar!\");\n      return;\n    }\n\n    Storage.createDB();\n    Storage.createDBConfig();\n  },\n  getLastId: () => Storage.get().length,\n  createDB: () => {\n    if (Storage.db && Storage.db.length) return;\n    localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n  },\n  createDBConfig: () => {\n    if (Storage.db && Storage.db.length) return;\n    localStorage.setItem(STORAGE_CONFIG_DATABASE, Data.push({\n      type: \"3x3\"\n    }));\n  },\n  insert: game => {\n    let g = Storage.get();\n    if (g.filter(gg => gg.id === game.id).length) return;\n\n    for (let i = 0; i < g.length; i++) if (g[i].status === \"saved\") g[i].status = \"stop\";\n\n    g.push(game);\n    localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n  },\n  update: ({\n    id,\n    status,\n    puzzle,\n    steps\n  }) => {\n    const game = Storage.get();\n    const g = game.filter(dd => dd.id === id).map(dd => {\n      dd.status = status;\n      dd.puzzle = puzzle;\n      dd.steps = steps;\n      return dd;\n    });\n    localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n  },\n  delete: id => {\n    const d = Storage.get();\n    const game = d.filter(dd => dd.id !== id);\n    localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n  },\n  get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n};\nconst Data = {\n  push: data => JSON.stringify(data),\n  pull: data => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/dao/index.js"],"names":["STORAGE_DATABASE","STORAGE_CONFIG_DATABASE","Storage","db","localStorage","getItem","db_config","response","status","message","connect","window","alert","createDB","createDBConfig","getLastId","get","length","setItem","Data","push","type","insert","game","g","filter","gg","id","i","update","puzzle","steps","dd","map","delete","d","pull","data","JSON","stringify","parse","content","filterById","s","getId"],"mappings":"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","sourcesContent":["const\n  STORAGE_DATABASE = \"game\",\n  STORAGE_CONFIG_DATABASE = \"config\";\n\nexport\n  const Storage = {\n    db: localStorage.getItem(STORAGE_DATABASE),\n    db_config: localStorage.getItem(STORAGE_CONFIG_DATABASE),\n    response: () => ({status: 1, message: \"\"}),\n    connect: () => {\n      if (!(\"localStorage\" in window)) {\n        alert(\"Erro ao conectar!\");\n        return;\n      }\n\n      Storage.createDB();\n      Storage.createDBConfig();\n    },\n    getLastId: () => Storage.get().length,\n    createDB: () => {\n      if (Storage.db && Storage.db.length)\n        return;\n\n      localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n    },\n    createDBConfig: () => {\n      if (Storage.db && Storage.db.length)\n        return;\n\n      localStorage.setItem(STORAGE_CONFIG_DATABASE, Data.push({type: \"3x3\"}));\n    },\n    insert: (game) => {\n      let g = Storage.get();\n      if (g.filter(gg => gg.id === game.id).length)\n        return;\n\n      for (let i = 0; i < g.length; i++)\n        if (g[i].status === \"saved\")\n          g[i].status = \"stop\";\n\n      g.push(game);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n    },\n    update: ({id, status, puzzle, steps}) => {\n      const game = Storage.get();\n      const g = game.filter(dd => dd.id === id).map(dd => {\n        dd.status = status;\n        dd.puzzle = puzzle;\n        dd.steps = steps;\n        return dd;\n      });\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    delete: id => {\n      const d = Storage.get();\n      const game = d.filter(dd => dd.id !== id);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n  };\n\nconst Data = {\n  push: (data) => JSON.stringify(data),\n  pull: (data) => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};"]},"metadata":{},"sourceType":"module"}