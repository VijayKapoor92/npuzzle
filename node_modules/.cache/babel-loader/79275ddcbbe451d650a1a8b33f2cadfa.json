{"ast":null,"code":"const STORAGE_DATABASE = \"game\",\n      DAO_STATUS_CONNECTED_OK = 1,\n      DAO_STATUS_CONNECTED_ERROR = -1,\n      DAO_ID_SIZE = 8;\nexport const Storage = {\n  db: localStorage.getItem(STORAGE_DATABASE),\n  response: () => ({\n    status: 1,\n    message: \"\"\n  }),\n  connect: () => {\n    if (!(\"localStorage\" in window)) {\n      alert(\"Erro ao conectar!\");\n      return;\n    }\n\n    Storage.createDB();\n  },\n  getId: () => {\n    const d = Storage.get();\n    if (d.length > 0) return d[d.length - 1].id;\n  },\n  createDB: () => {\n    if (Storage.db && Storage.db.length) return;\n    localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n  },\n  insert: game => {\n    const g = Storage.get();\n    if (g.filter(gg => gg.id === game.id).length) return;\n    g.push(game);\n    localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n  },\n  update: ({\n    id,\n    status,\n    puzzle\n  }) => {\n    const game = Storage.get().filter(dd => dd.id === id).map(dd => {\n      dd.status = status;\n      dd.puzzle = puzzle;\n      return dd;\n    });\n    localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n  },\n  delete: () => {},\n  get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n};\nconst Data = {\n  push: data => JSON.stringify(data),\n  pull: data => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/dao/index.js"],"names":["STORAGE_DATABASE","DAO_STATUS_CONNECTED_OK","DAO_STATUS_CONNECTED_ERROR","DAO_ID_SIZE","Storage","db","localStorage","getItem","response","status","message","connect","window","alert","createDB","getId","d","get","length","id","setItem","Data","push","insert","game","g","filter","gg","update","puzzle","dd","map","delete","pull","data","JSON","stringify","parse","content","filterById","s"],"mappings":"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","sourcesContent":["const\n  STORAGE_DATABASE = \"game\",\n  DAO_STATUS_CONNECTED_OK = 1,\n  DAO_STATUS_CONNECTED_ERROR = -1,\n  DAO_ID_SIZE = 8;\n\nexport\n  const Storage = {\n    db: localStorage.getItem(STORAGE_DATABASE),\n    response: () => ({status: 1, message: \"\"}),\n    connect: () => {\n      if (!(\"localStorage\" in window)) {\n        alert(\"Erro ao conectar!\");\n        return;\n      }\n\n      Storage.createDB();\n    },\n    getId: () => {\n      const d = Storage.get();\n      if (d.length > 0)\n        return d[d.length - 1].id;\n    },\n    createDB: () => {\n      if (Storage.db && Storage.db.length)\n        return;\n\n      localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n    },\n    insert: (game) => {\n      const g = Storage.get();\n      if (g.filter(gg => gg.id === game.id).length)\n        return;\n\n      g.push(game);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n    },\n    update: ({id, status, puzzle}) => {\n      const game = Storage.get().filter(dd => dd.id === id).map(dd => {\n        dd.status = status;\n        dd.puzzle = puzzle;\n        return dd;\n      });\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    delete: () => {},\n    get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n  };\n\nconst Data = {\n  push: (data) => JSON.stringify(data),\n  pull: (data) => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};"]},"metadata":{},"sourceType":"module"}