{"ast":null,"code":"import _defineProperty from \"/Users/vijaykapoor/Documents/github/npuzzle/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vijaykapoor/Documents/github/npuzzle/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport WinnerContainer from \"./components/WinnerContainer\";\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\nimport CloseIcon from \"react-icons/lib/fa/close\";\nimport TrophyIcon from \"react-icons/lib/fa/trophy\";\nimport { PUZZLE_MODE_EASY } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport { getPositionZero, shuffle } from \"./utils\";\nimport { Storage } from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = () => {\n      const squares = this.state.squares.squares;\n      console.log(squares); // localStorage.setItem(\"game\", JSON.stringify({\"status\": true, puzzle: []}));\n\n      Storage.insert({\n        id: 1,\n        status: \"start\",\n        puzzle: [squares]\n      });\n      this.setState({\n        status: true\n      });\n    };\n\n    this.handleExit = () => {\n      localStorage.setItem(\"game\", JSON.stringify({\n        \"status\": false,\n        puzzle: []\n      }));\n      this.setState({\n        status: false,\n        winner: false,\n        steps: 0\n      });\n    };\n\n    this.handleSaveAndExit = puzzle => {\n      localStorage.setItem(\"game\", JSON.stringify({\n        \"status\": false,\n        puzzle\n      }));\n      this.setState({\n        status: false\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState(state => ({\n        squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n        steps: 0\n      }));\n    };\n\n    this.validateColumnAndRow = (position, zero) => position.i === zero.i && Math.abs(position.j - zero.j) === 1 || position.j === zero.j && Math.abs(position.i - zero.i) === 1;\n\n    this.validateWinner = squares => {\n      let counter = 0,\n          winner = false;\n      const le = squares.length * squares[squares.length - 1].length;\n\n      for (let i = 0; i < squares.length; i++) for (let j = 0; j < squares[i].length; j++) if (squares[i][j] === Answers[PUZZLE_MODE_EASY][i][j]) counter++;\n\n      if (counter < le) counter = 0;\n      if (counter === le) winner = true;\n      return winner;\n    };\n\n    this.handleClickSquare = (value, position) => {\n      let squares = this.state.squares;\n      const zero = getPositionZero(squares);\n\n      if (value === 0 || !this.validateColumnAndRow(position, zero)) {\n        return;\n      }\n\n      squares[position.i][position.j] = 0;\n      squares[zero.i][zero.j] = value;\n      const winner = this.validateWinner(squares);\n      this.setState(state => _objectSpread({}, state, {\n        squares,\n        steps: state.steps + 1,\n        winner,\n        openWinner: winner\n      }));\n    };\n\n    this.handleCloseWinner = () => this.setState({\n      openWinner: false\n    });\n\n    this.handleOpenConfig = () => this.setState({\n      isConfigOpen: true\n    });\n\n    this.renderFirstPage = () => React.createElement(\"div\", {\n      className: \"first-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"first-page__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"N-PUZZLE\"), React.createElement(\"div\", {\n      className: \"first-page__subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Venha se divertir\"), React.createElement(\"div\", {\n      className: \"first-page__action-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn-start\",\n      onClick: this.handleStart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Jogar\")));\n\n    this.renderConfig = () => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"N\\xEDvel:\"), React.createElement(\"select\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"F\\xE1cil\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"M\\xE9dio\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Dif\\xEDcil\"))));\n\n    this.state = {\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0,\n      status: false,\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    /*if (localStorage.getItem(\"game\").length) {\n      let json = JSON.parse(localStorage.getItem(\"game\"));\n      if (json.status)\n        this.setState({status: json.status});\n    }*/\n    Storage.connect();\n  }\n\n  render() {\n    const _this$state = this.state,\n          status = _this$state.status,\n          squares = _this$state.squares,\n          steps = _this$state.steps,\n          isConfigOpen = _this$state.isConfigOpen,\n          winner = _this$state.winner,\n          openWinner = _this$state.openWinner; //todo: logica para salvar o jogo e sair.\n    //todo: criar as views (IntroView e GameView).\n    //todo: logica para configuracoes.\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, isConfigOpen && this.renderConfig(), React.createElement(WinnerContainer, {\n      open: openWinner,\n      steps: steps,\n      onClose: this.handleCloseWinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), status ? React.createElement(Game, {\n      winner: winner,\n      squares: squares,\n      steps: steps,\n      onExit: this.handleExit,\n      onSaveAndExit: this.handleSaveAndExit,\n      onReset: this.handleReset,\n      onClickSquare: this.handleClickSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }) : this.renderFirstPage());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/App.js"],"names":["React","Component","Fragment","Game","WinnerContainer","SettingsIcon","CloseIcon","TrophyIcon","PUZZLE_MODE_EASY","Puzzles","Answers","getPositionZero","shuffle","Storage","App","constructor","props","handleStart","squares","state","console","log","insert","id","status","puzzle","setState","handleExit","localStorage","setItem","JSON","stringify","winner","steps","handleSaveAndExit","handleReset","validateColumnAndRow","position","zero","i","Math","abs","j","validateWinner","counter","le","length","handleClickSquare","value","openWinner","handleCloseWinner","handleOpenConfig","isConfigOpen","renderFirstPage","renderConfig","isWinner","componentDidMount","connect","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Game from \"./components/Game\";\nimport WinnerContainer from \"./components/WinnerContainer\";\n\nimport SettingsIcon from \"react-icons/lib/fa/cog\";\nimport CloseIcon from \"react-icons/lib/fa/close\";\nimport TrophyIcon from \"react-icons/lib/fa/trophy\";\n\nimport { PUZZLE_MODE_EASY } from \"./utils/constants\";\nimport { Puzzles, Answers } from \"./utils/puzzles\";\nimport {getPositionZero, shuffle} from \"./utils\";\nimport { Storage } from \"./dao\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0,\n      status: false,\n      isConfigOpen: false,\n      isWinner: false,\n      openWinner: false\n    };\n  }\n\n  componentDidMount() {\n    /*if (localStorage.getItem(\"game\").length) {\n      let json = JSON.parse(localStorage.getItem(\"game\"));\n      if (json.status)\n        this.setState({status: json.status});\n    }*/\n    Storage.connect();\n  }\n\n  handleStart = () => {\n    const { squares } = this.state.squares;\n    console.log(squares);\n    // localStorage.setItem(\"game\", JSON.stringify({\"status\": true, puzzle: []}));\n    Storage.insert({id: 1, status: \"start\", puzzle: [squares]});\n    this.setState({status: true});\n  };\n\n  handleExit = () => {\n    localStorage.setItem(\"game\", JSON.stringify({\"status\": false, puzzle: []}));\n    this.setState({status: false, winner: false, steps: 0});\n  };\n\n  handleSaveAndExit = puzzle => {\n    localStorage.setItem(\"game\", JSON.stringify({\"status\": false, puzzle}));\n    this.setState({status: false});\n  };\n\n  handleReset = () => {\n    this.setState(state => ({\n      squares: shuffle(Puzzles[PUZZLE_MODE_EASY]),\n      steps: 0\n    }));\n  };\n\n  validateColumnAndRow = (position, zero) =>\n    (position.i === zero.i && Math.abs(position.j - zero.j) === 1)\n    || (position.j === zero.j && Math.abs(position.i - zero.i) === 1);\n\n  validateWinner = squares => {\n    let\n      counter = 0,\n      winner = false;\n\n    const le = (squares.length * (squares[squares.length - 1].length));\n\n    for(let i = 0;i < squares.length;i++)\n      for(let j = 0;j < squares[i].length; j++)\n        if (squares[i][j] === Answers[PUZZLE_MODE_EASY][i][j])\n          counter++;\n\n    if (counter < le)\n      counter = 0;\n    if (counter === le)\n      winner = true;\n\n    return winner;\n  };\n\n  handleClickSquare = (value, position) => {\n    let squares = this.state.squares;\n    const zero = getPositionZero(squares);\n\n    if (value === 0 || !(this.validateColumnAndRow(position, zero))) {\n      return;\n    }\n    squares[position.i][position.j] = 0;\n    squares[zero.i][zero.j] = value;\n\n    const winner = this.validateWinner(squares);\n\n    this.setState(state => ({\n      ...state,\n      squares,\n      steps: state.steps + 1,\n      winner,\n      openWinner: winner\n    }));\n  };\n\n  handleCloseWinner = () =>\n    this.setState({openWinner: false});\n\n  handleOpenConfig = () =>\n    this.setState({isConfigOpen: true});\n\n  renderFirstPage = () =>\n    <div className=\"first-page\">\n      <div className=\"first-page__title\">N-PUZZLE</div>\n      <div className=\"first-page__subtitle\">Venha se divertir</div>\n      <div className=\"first-page__action-container\">\n        <button className=\"btn-start\" onClick={this.handleStart}>Jogar</button>\n        {/*<button className=\"btn-config\" onClick={this.handleOpenConfig}>\n          <SettingsIcon/>\n        </button>*/}\n      </div>\n    </div>;\n\n  renderConfig = () =>\n    <div>\n      <div>Configurações</div>\n      <div>\n        <label>Nível:</label>\n        <select>\n          <option>Fácil</option>\n          <option>Médio</option>\n          <option>Difícil</option>\n        </select>\n      </div>\n    </div>;\n\n  render() {\n    const {status, squares, steps, isConfigOpen, winner, openWinner} = this.state;\n\n    //todo: logica para salvar o jogo e sair.\n    //todo: criar as views (IntroView e GameView).\n    //todo: logica para configuracoes.\n\n    return (\n      <Fragment>\n        {isConfigOpen && this.renderConfig()}\n        <WinnerContainer\n          open={openWinner}\n          steps={steps}\n          onClose={this.handleCloseWinner}\n        />\n        {status\n          ? <Game\n              winner={winner}\n              squares={squares}\n              steps={steps}\n              onExit={this.handleExit}\n              onSaveAndExit={this.handleSaveAndExit}\n              onReset={this.handleReset}\n              onClickSquare={this.handleClickSquare}\n            />\n          : this.renderFirstPage()\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}