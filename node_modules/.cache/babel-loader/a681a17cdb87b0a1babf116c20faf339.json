{"ast":null,"code":"export var shuffle=function shuffle(squares){var m=squares.length;var t;for(var i=0;i<m;i++){var n=squares[i].length,k=Math.floor(Math.random()*i),l=void 0;for(var j=0;j<n;j++){l=Math.floor(Math.random()*j);t=squares[i][j];squares[i][j]=squares[k][l];squares[k][l]=t;}}return squares;},getPositionZero=function getPositionZero(squares){var position={},l=squares.length;for(var i=0;i<l;i++){for(var j=0;j<l;j++){if(squares[i][j]===0)position={i:i,j:j};}}return position;};","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/utils/index.js"],"names":["shuffle","squares","m","length","t","i","n","k","Math","floor","random","l","j","getPositionZero","position"],"mappings":"AAAA,MAAO,IAELA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,OAAO,CAAI,CACnB,GAAMC,CAAAA,CAAC,CAAGD,OAAO,CAACE,MAAlB,CACA,GAAIC,CAAAA,CAAJ,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,CAApB,CAAuBG,CAAC,EAAxB,CAA4B,CAC1B,GAAIC,CAAAA,CAAC,CAAGL,OAAO,CAACI,CAAD,CAAP,CAAWF,MAAnB,CAA2BI,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBL,CAA3B,CAA/B,CAA8DM,CAAC,OAA/D,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,CAApB,CAAuBM,CAAC,EAAxB,CAA4B,CAC1BD,CAAC,CAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBE,CAA3B,CAAJ,CACAR,CAAC,CAAGH,OAAO,CAACI,CAAD,CAAP,CAAWO,CAAX,CAAJ,CACAX,OAAO,CAACI,CAAD,CAAP,CAAWO,CAAX,EAAgBX,OAAO,CAACM,CAAD,CAAP,CAAWI,CAAX,CAAhB,CACAV,OAAO,CAACM,CAAD,CAAP,CAAWI,CAAX,EAAgBP,CAAhB,CACD,CACF,CACD,MAAOH,CAAAA,OAAP,CACD,CAfI,CAiBLY,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAZ,OAAO,CAAI,CAC3B,GAAIa,CAAAA,QAAQ,CAAG,EAAf,CAAmBH,CAAC,CAAGV,OAAO,CAACE,MAA/B,CACA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGM,CAApB,CAAuBN,CAAC,EAAxB,EACE,IAAK,GAAIO,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,CAApB,CAAuBC,CAAC,EAAxB,CAA4B,CAC1B,GAAIX,OAAO,CAACI,CAAD,CAAP,CAAWO,CAAX,IAAkB,CAAtB,CACEE,QAAQ,CAAG,CAACT,CAAC,CAADA,CAAD,CAAIO,CAAC,CAADA,CAAJ,CAAX,CACH,CAJH,CAMA,MAAOE,CAAAA,QAAP,CACD,CA1BI","sourcesContent":["export const\n\n  shuffle = squares => {\n    const m = squares.length;\n    let t;\n    for (let i = 0; i < m; i++) {\n      let n = squares[i].length, k = Math.floor(Math.random() * i), l;\n      for (let j = 0; j < n; j++) {\n        l = Math.floor(Math.random() * j);\n        t = squares[i][j];\n        squares[i][j] = squares[k][l];\n        squares[k][l] = t;\n      }\n    }\n    return squares;\n  },\n\n  getPositionZero = squares => {\n    let position = {}, l = squares.length;\n    for (let i = 0; i < l; i++)\n      for (let j = 0; j < l; j++) {\n        if (squares[i][j] === 0)\n          position = {i, j};\n      }\n\n    return position;\n  }\n\n;"]},"metadata":{},"sourceType":"module"}