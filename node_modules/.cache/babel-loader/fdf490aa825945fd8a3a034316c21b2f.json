{"ast":null,"code":"const STORAGE_DATABASE = \"game\",\n      DAO_STATUS_CONNECTED_OK = 1,\n      DAO_STATUS_CONNECTED_ERROR = -1,\n      DAO_ID_SIZE = 8;\nexport const Storage = {\n  db: localStorage.getItem(STORAGE_DATABASE),\n  response: () => ({\n    status: 1,\n    message: \"\"\n  }),\n  connect: () => {\n    if (!(\"localStorage\" in window)) {\n      alert(\"Erro ao conectar!\");\n      return;\n    }\n\n    Storage.createDB();\n  },\n  getLastId: () => Storage.get().length,\n  createDB: () => {\n    if (Storage.db && Storage.db.length) return;\n    localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n  },\n  insert: game => {\n    const g = Storage.get();\n    if (g.filter(gg => gg.id === game.id).length) return;\n    g.filter(gg => g.status === \"saved\").map(gg => gg.status === \"stop\");\n    g.push(game);\n    localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n  },\n  update: game => {\n    console.log(game);\n    /*const game = Storage.get().filter(dd => dd.id === id).map(dd => {\n      dd.status = status;\n      dd.puzzle = puzzle;\n      dd.steps = steps;\n      return dd;\n    });\n    localStorage.setItem(STORAGE_DATABASE, Data.push(game));*/\n  },\n  delete: id => {\n    const d = Storage.get();\n    const game = d.filter(dd => dd.id !== id);\n    localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n  },\n  get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n};\nconst Data = {\n  push: data => JSON.stringify(data),\n  pull: data => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};","map":{"version":3,"sources":["/Users/vijaykapoor/Documents/github/npuzzle/src/dao/index.js"],"names":["STORAGE_DATABASE","DAO_STATUS_CONNECTED_OK","DAO_STATUS_CONNECTED_ERROR","DAO_ID_SIZE","Storage","db","localStorage","getItem","response","status","message","connect","window","alert","createDB","getLastId","get","length","setItem","Data","push","insert","game","g","filter","gg","id","map","update","console","log","delete","d","dd","pull","data","JSON","stringify","parse","content","filterById","s","getId"],"mappings":"AAAA,MACEA,gBAAgB,GAAG,MADrB;AAAA,MAEEC,uBAAuB,GAAG,CAF5B;AAAA,MAGEC,0BAA0B,GAAG,CAAC,CAHhC;AAAA,MAIEC,WAAW,GAAG,CAJhB;AAMA,OACE,MAAMC,OAAO,GAAG;AACdC,EAAAA,EAAE,EAAEC,YAAY,CAACC,OAAb,CAAqBP,gBAArB,CADU;AAEdQ,EAAAA,QAAQ,EAAE,OAAO;AAACC,IAAAA,MAAM,EAAE,CAAT;AAAYC,IAAAA,OAAO,EAAE;AAArB,GAAP,CAFI;AAGdC,EAAAA,OAAO,EAAE,MAAM;AACb,QAAI,EAAE,kBAAkBC,MAApB,CAAJ,EAAiC;AAC/BC,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACD;;AAEDT,IAAAA,OAAO,CAACU,QAAR;AACD,GAVa;AAWdC,EAAAA,SAAS,EAAE,MAAMX,OAAO,CAACY,GAAR,GAAcC,MAXjB;AAYdH,EAAAA,QAAQ,EAAE,MAAM;AACd,QAAIV,OAAO,CAACC,EAAR,IAAcD,OAAO,CAACC,EAAR,CAAWY,MAA7B,EACE;AAEFX,IAAAA,YAAY,CAACY,OAAb,CAAqBlB,gBAArB,EAAuCmB,IAAI,CAACC,IAAL,CAAU,EAAV,CAAvC;AACD,GAjBa;AAkBdC,EAAAA,MAAM,EAAGC,IAAD,IAAU;AAChB,UAAMC,CAAC,GAAGnB,OAAO,CAACY,GAAR,EAAV;AACA,QAAIO,CAAC,CAACC,MAAF,CAASC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUJ,IAAI,CAACI,EAA9B,EAAkCT,MAAtC,EACE;AAEFM,IAAAA,CAAC,CAACC,MAAF,CAASC,EAAE,IAAIF,CAAC,CAACd,MAAF,KAAa,OAA5B,EAAqCkB,GAArC,CAAyCF,EAAE,IAAIA,EAAE,CAAChB,MAAH,KAAc,MAA7D;AACAc,IAAAA,CAAC,CAACH,IAAF,CAAOE,IAAP;AACAhB,IAAAA,YAAY,CAACY,OAAb,CAAqBlB,gBAArB,EAAuCmB,IAAI,CAACC,IAAL,CAAUG,CAAV,CAAvC;AACD,GA1Ba;AA2BdK,EAAAA,MAAM,EAAGN,IAAD,IAAU;AAChBO,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA;;;;;;;AAOD,GApCa;AAqCdS,EAAAA,MAAM,EAAEL,EAAE,IAAI;AACZ,UAAMM,CAAC,GAAG5B,OAAO,CAACY,GAAR,EAAV;AACA,UAAMM,IAAI,GAAGU,CAAC,CAACR,MAAF,CAASS,EAAE,IAAIA,EAAE,CAACP,EAAH,KAAUA,EAAzB,CAAb;AACApB,IAAAA,YAAY,CAACY,OAAb,CAAqBlB,gBAArB,EAAuCmB,IAAI,CAACC,IAAL,CAAUE,IAAV,CAAvC;AACD,GAzCa;AA0CdN,EAAAA,GAAG,EAAE,MAAMG,IAAI,CAACe,IAAL,CAAU5B,YAAY,CAACC,OAAb,CAAqBP,gBAArB,CAAV;AA1CG,CAAhB;AA6CF,MAAMmB,IAAI,GAAG;AACXC,EAAAA,IAAI,EAAGe,IAAD,IAAUC,IAAI,CAACC,SAAL,CAAeF,IAAf,CADL;AAEXD,EAAAA,IAAI,EAAGC,IAAD,IAAUC,IAAI,CAACE,KAAL,CAAWH,IAAX,CAFL;AAGXI,EAAAA,OAAO,EAAE,EAHE;AAIXC,EAAAA,UAAU,EAAEd,EAAE,IAAItB,OAAO,CAACY,GAAR,GAAcQ,MAAd,CAAqBiB,CAAC,IAAIA,CAAC,CAACf,EAAF,KAAStB,OAAO,CAACsC,KAAR,EAAnC;AAJP,CAAb","sourcesContent":["const\n  STORAGE_DATABASE = \"game\",\n  DAO_STATUS_CONNECTED_OK = 1,\n  DAO_STATUS_CONNECTED_ERROR = -1,\n  DAO_ID_SIZE = 8;\n\nexport\n  const Storage = {\n    db: localStorage.getItem(STORAGE_DATABASE),\n    response: () => ({status: 1, message: \"\"}),\n    connect: () => {\n      if (!(\"localStorage\" in window)) {\n        alert(\"Erro ao conectar!\");\n        return;\n      }\n\n      Storage.createDB();\n    },\n    getLastId: () => Storage.get().length,\n    createDB: () => {\n      if (Storage.db && Storage.db.length)\n        return;\n\n      localStorage.setItem(STORAGE_DATABASE, Data.push([]));\n    },\n    insert: (game) => {\n      const g = Storage.get();\n      if (g.filter(gg => gg.id === game.id).length)\n        return;\n\n      g.filter(gg => g.status === \"saved\").map(gg => gg.status === \"stop\");\n      g.push(game);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(g));\n    },\n    update: (game) => {\n      console.log(game);\n      /*const game = Storage.get().filter(dd => dd.id === id).map(dd => {\n        dd.status = status;\n        dd.puzzle = puzzle;\n        dd.steps = steps;\n        return dd;\n      });\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));*/\n    },\n    delete: id => {\n      const d = Storage.get();\n      const game = d.filter(dd => dd.id !== id);\n      localStorage.setItem(STORAGE_DATABASE, Data.push(game));\n    },\n    get: () => Data.pull(localStorage.getItem(STORAGE_DATABASE))\n  };\n\nconst Data = {\n  push: (data) => JSON.stringify(data),\n  pull: (data) => JSON.parse(data),\n  content: [],\n  filterById: id => Storage.get().filter(s => s.id === Storage.getId())\n};"]},"metadata":{},"sourceType":"module"}